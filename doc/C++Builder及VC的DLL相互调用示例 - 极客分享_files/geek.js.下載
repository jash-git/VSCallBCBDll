$(function() {
    //我关注的
    $('.toggle-list > .fa').click(function() {
        $(this).parents('.toggle-list').toggleClass('child-off');    
    })        

    if($('.main').length) {

    $('.main').scroll(function(){
        var st = $(this).scrollTop(),
        loading = false,
        winh = $(this).height(),
        bodyh = $(this)[0].scrollHeight;
        if (st < 200){
            $('.scrolltop_bar').addClass('affix-top').removeClass('affix for-list');
        }else{
            $('.scrolltop_bar').addClass('affix for-list').removeClass('affix-top');
        }
        if (winh + st >= bodyh && !loading){
            $(this).scrollTop(st -1);
            //loadNewsData();
        }
    });
    } else {
     $(window).scroll(function(){
        var st = $(this).scrollTop();
        if (st < 200){
            $('.scrolltop_bar').addClass('affix-top').removeClass('affix for-list');
        }else{
            $('.scrolltop_bar').addClass('affix for-list').removeClass('affix-top');
        }
    });

    }

    if($('#comments').length > 0){
        $('.scrolltop_bar').addClass('in_viewer');
    }
    $('.scrolltop_bar .new_comment').click(function(){
            $('#newest .footer_bar .reply.start_cmmde').trigger('click');
    });
    $('.js-scroll-top').click(function(){
            if($('.main').length) {
                return $('.main').animate({scrollTop:0},1000);
            }
            $('body,html,.detail_cont_body').animate({scrollTop:0},1000);
    });
    $('body').delegate('.content_view', 'mouseover', function(){
            $('.content_view a').attr('target','_blank');
    });

    $('.share-link-btn').click(function(e) {
            console.log(e.originalEvent.clipboardData);
        var type = $(this).attr('data-type');
        $.get('/topic/loadsurl',{type:type},function(data) {
            if(data.status != 0) {
                ThinkError(data.data);
            } else {
	            $('.ThinkBox-close').click();
                $('.ThinkBox-default').remove();
	            $.ThinkBox(data.data.html,{title:data.data.title,drag:true,modalClose:false});
                load_call_back();
            } 
        },'json')
    })

    $('.login-btn').click(function() {
        var type = $(this).attr('data-type');
        loadLogin(type);
    })

    $('.login-out').click(function() {
        $.get('/index/loginout',function(data) {
            if(data.status == 0) {
                window.location.reload();
            }    
        })        
    })

    //个人设置
    $('.user-sett').click(function() {
            window.open('http://www.webfalse.com/passport/loadmanage?from_app=geekshare')
            return true;
        $.get('/login/loadmanage',function(data) {
            if(data.status != 0) {
                ThinkError(data.data);
            } else {
	            $('.ThinkBox-close').click();
                $('.ThinkBox-default').remove();
	            $.ThinkBox(data.data.html,{title:data.data.title,drag:true,modalClose:false});
                load_manage_callback();
            } 
        },'json')
    })

    //点赞
    $('body').delegate('.news_vote .fa', 'click', function(){
        if($(this).attr('disabled') == 'disabled') {
            return true;
        }        
        if(uid == 0) {
            loadLogin('need_login');
            return false;
        }
        var type = $(this).attr('data-type');
        var target_id = $(this).parent().attr('data-id');
        var _this = this;
        $.post('/index/dig',{type:1,dig_type:type,target_id:target_id},function(data) {
            if(data.status != 0) {
                ThinkError(data.data);
            } else {
                var now_vote = $(_this).parent().find('.count').html();
                now_vote = parseInt(now_vote);
                now_vote += parseInt(data.data.dig_num);
                $(_this).parent().find('.count').html(now_vote);
                $(_this).siblings('.fa').removeAttr('disabled');
                $(_this).attr('disabled', 'disabled');
                if(type == 'dig') {
                    $(_this).parent().removeClass('isdown').addClass('isup');
                } else {
                    $(_this).parent().removeClass('isup').addClass('isdown');
                }
            }
        },'json')
    })

    //关注
    $('.focus_btn[data-type]').click(function() {
        var is_cancel = $(this).hasClass('focus_cancel');       
        var type = $(this).attr('data-type');
        var target_id = $(this).attr('data-target_id');
        var num_con = $(this).attr('data-num');
        if(is_cancel) {
            var url = '/index/cancelfocus';
        } else {
            var url = '/index/focus';
        }

        var _this = this;
        $.post(url, {type:type, target_id:target_id}, function(data) {
            if(data.status != 0) {
                ThinkError(data.data);
            } else {
                var num = data.data.num;
                if(num == 1) {
                    var now_num = parseInt($('#'+num_con).html());
                    now_num = is_cancel?(now_num-1):(now_num+1);
                    if(now_num < 0) {
                        now_num = 0;
                    }
                    $('#'+num_con).html(now_num);
                    $(_this).toggleClass('focus_cancel');
                }
            }
            
        }, 'json')
    })
})

function loadLogin(type, call_func) {
        window.open('/index/login?type='+type);
        return true;
        var p = showModalDialog('/index/login?type='+type,[],"dialogwidth:1000;dialogheight:470;resizable:yes");
        if(p === true) {
            window.location.reload();
        }
        /*
        $.get('/login/loadlogin',{type:type},function(data) {
            if(data.status != 0) {
                ThinkError(data.data);
            } else {
	            $('.ThinkBox-close').click();
                $('.ThinkBox-default').remove();
	            $.ThinkBox(data.data.html,{title:data.data.title,drag:true,modalClose:false});
                load_login_call_back(call_func);
            } 
        },'json')
        */
}


//左侧菜单滚动条 start
var scroller  = null;
var scrollbar = null;
function newScroller() {
    if($('#leftnav_scr').length > 0){
        var winh  = window.innerHeight;
        scroller  = new jsScroller(document.getElementById("leftnav_scr"), 100, winh);
        scrollbar = new jsScrollbar (document.getElementById("leftnav_scr_bar"), scroller, true);
    }
}


window.onload = function () {
    newScroller();
};
window.onresize = function () {
    newScroller();
};

function jsScroller (o, w, h) {
    var self = this;
    var list = o.getElementsByTagName("div");
    for (var i = 0; i < list.length; i++) {
        if (list[i].className.indexOf("scroll_con") > -1) {
            o = list[i]; // 以 o 为对象，将对象包含的class名为Scroller-cont的元素付给 对象 o
        }
    }

    //Private methods
    this._setPos = function (x, y) {
        if (x < this.viewableWidth - this.totalWidth)
            x = this.viewableWidth - this.totalWidth;
        if (x > 0) x = 0;
        if (y < this.viewableHeight - this.totalHeight)
            y = this.viewableHeight - this.totalHeight;
        if (y > 0) y = 0;
        this._x = x;
        this._y = y;
        with (o.style) {
            left = this._x +"px";
            top  = this._y +"px";
        }
    };
    //Public Methods
    this.reset = function () {
        this.content = o;
        this.totalHeight = o.offsetHeight;
        this.totalWidth  = o.offsetWidth;
        this._x = 0;
        this._y = 0;
        with (o.style) {
            left = "0px";
            top  = "0px";
        }
    };
    this.scrollBy = function (x, y) {
        this._setPos(this._x + x, this._y + y);
    };
    this.scrollTo = function (x, y) {
        this._setPos(-x, -y);
    };
    this.stopScroll = function () {
        if (this.scrollTimer) window.clearInterval(this.scrollTimer);
    };
    this.startScroll = function (x, y) {
        this.stopScroll();
        this.scrollTimer = window.setInterval(
            function(){ self.scrollBy(x, y); }, 40
        );
    };
    this.swapContent = function (c, w, h) {
        o = c;
        var list = o.getElementsByTagName("div");
        for (var i = 0; i < list.length; i++) {
            if (list[i].className.indexOf("scroll_con") > -1) {
                o = list[i];
            }
        }
        if (w) this.viewableWidth  = w;
        if (h) this.viewableHeight = h;
        this.reset();
    };

    //variables
    this.content = o;
    this.viewableWidth  = w;
    this.viewableHeight = h;
    this.totalWidth  = o.offsetWidth;
    this.totalHeight = o.offsetHeight;

    //this.totalHeight = $(o).outerHeight();
    this.scrollTimer = null;
    this.reset();
};


function jsScrollbar (o, s, a, ev) {
    var self = this;

    this.reset = function () {

        //Arguments that were passed
        this._parent = o;
        this._src    = s;
        this.auto    = a ? a : false;
        this.eventHandler = ev ? ev : function () {};
        //Component Objects
        this._up   = this._findComponent("scroller_up", this._parent);
        this._down = this._findComponent("scroller_down", this._parent);
        this._yTrack  = this._findComponent("scroll_bar_box", this._parent);
        this._yHandle = this._findComponent("scroll_bar_handle", this._yTrack);
        //Height and position properties
        this._trackTop = findOffsetTop(this._yTrack);
        this._trackHeight  = this._yTrack.offsetHeight;
        this._handleHeight = this._yHandle.offsetHeight;
        this._x = 0;
        this._y = 0;
        //Misc. variables
        this._scrollDist  = 5;
        this._scrollTimer = null;
        this._selectFunc  = null;
        this._grabPoint   = null;
        this._tempTarget  = null;
        this._tempDistX   = 0;
        this._tempDistY   = 0;
        this._disabled    = false;
        this._ratio = ( this._src.totalHeight- this._src.viewableHeight)/(this._trackHeight - this._handleHeight);
        this._yHandle.ondragstart  = function () {return false;};
        this._yHandle.onmousedown = function () {return false;};
        if(window.event){
            this._addEvent(this._src.content, "mousewheel", this._scrollbarWheel);
        }//W3C
        else{
            this._addEvent(this._src.content, "DOMMouseScroll", this._scrollbarWheel);
        }

        this._removeEvent(this._parent, "mousedown", this._scrollbarClick);
        this._addEvent(this._parent, "mousedown", this._scrollbarClick);

        //this._src.reset();
        with (this._yHandle.style) {
            top  = "0px";
            left = "0px";
        }
        this._moveContent();

        if (this._src.totalHeight < this._src.viewableHeight) {
            this._disabled = true;
            this._yHandle.style.visibility = "hidden";
            if (this.auto) this._parent.style.visibility = "hidden";
        } else {
            this._disabled = false;
            this._yHandle.style.visibility = "visible";
            this._parent.style.visibility  = "visible";
        }

    };
    this._addEvent = function (o, t, f) {
        if (o.addEventListener) o.addEventListener(t, f, false);
        else if (o.attachEvent) o.attachEvent('on'+ t, f);
        else o['on'+ t] = f;
    };
    this._removeEvent = function (o, t, f) {
        if (o.removeEventListener) o.removeEventListener(t, f, false);
        else if (o.detachEvent) o.detachEvent('on'+ t, f);
        else o['on'+ t] = null;
    };
    this._findComponent = function (c, o) {
        var kids = o.childNodes;
        for (var i = 0; i < kids.length; i++) {
            if (kids[i].className && kids[i].className == c) {
                return kids[i];
            }
        }
    };
    //Thank you, Quirksmode
    function findOffsetTop (o) {
        var t = 0;
        if (o.offsetParent) {
            while (o.offsetParent) {
                t += o.offsetTop;
                o  = o.offsetParent;
            }
        }
        return t;
    };
    this._scrollbarClick = function (e) {
        if (self._disabled) return false;

        e = e ? e : event;
        if (!e.target) e.target = e.srcElement;

        if (e.target.className.indexOf("scroller_up") > -1) self._scrollUp(e);
        else if (e.target.className.indexOf("scroller_down") > -1) self._scrollDown(e);
        else if (e.target.className.indexOf("scroll_bar_box") > -1) self._scrollTrack(e);
        else if (e.target.className.indexOf("scroll_bar_handle") > -1) self._scrollHandle(e);

        self._tempTarget = e.target;
        self._selectFunc = document.onselectstart;
        document.onselectstart = function () {return false;};

        self.eventHandler(e.target, "mousedown");
        self._addEvent(document, "mouseup", self._stopScroll, false);

        return false;
    };
    this._scrollbarDrag = function (e) {
        e = e ? e : event;
        var t = parseInt(self._yHandle.style.top);
        var v = e.clientY + document.body.scrollTop - self._trackTop;
        with (self._yHandle.style) {
            if (v >= self._trackHeight - self._handleHeight + self._grabPoint)
                top = self._trackHeight - self._handleHeight +"px";
            else if (v <= self._grabPoint) top = "0px";
            else top = v - self._grabPoint +"px";
            self._y = parseInt(top);
        }

        self._moveContent();
    };
    this._scrollbarWheel = function (e) {
        e = e ? e : event;
        var dir = 0;
        if (e.wheelDelta >= 120) dir = -1;
        if (e.wheelDelta <= -120) dir = 1;
        if(e.detail >=3) dir= 1;
        if(e.detail <=-3) dir = -1;

         //console.log(self._src);
        self._src.totalHeight = $(".scroll_con").innerHeight();  //重新赋值，把scroller的totalHeight去重新获取 2016-2-2
        self._ratio = ( self._src.totalHeight- self._src.viewableHeight)/(self._trackHeight - self._handleHeight);
        self.scrollBy(0, dir * 20);
        e.returnValue = false;

    };
    this._startScroll = function (x, y) {
        this._tempDistX = x;
        this._tempDistY = y;
        //console.log(this._src.totalHeight);
        this._scrollTimer = window.setInterval(function () {
            self.scrollBy(self._tempDistX, self._tempDistY);
        }, 40);
    };
    this._stopScroll = function () {
        self._removeEvent(document, "mousemove", self._scrollbarDrag, false);
        self._removeEvent(document, "mouseup", self._stopScroll, false);

        if (self._selectFunc) document.onselectstart = self._selectFunc;
        else document.onselectstart = function () { return true; };

        if (self._scrollTimer) window.clearInterval(self._scrollTimer);
        self.eventHandler (self._tempTarget, "mouseup");
    };
    this._scrollUp = function (e) {this._startScroll(0, -this._scrollDist);};
    this._scrollDown = function (e) {this._startScroll(0, this._scrollDist);};
    this._scrollTrack = function (e) {
        var curY = e.clientY + document.body.scrollTop;
        this._scroll(0, curY - this._trackTop - this._handleHeight/2);
    };
    this._scrollHandle = function (e) {
        var curY = e.clientY + document.body.scrollTop;
        this._grabPoint = curY - findOffsetTop(this._yHandle);
        this._addEvent(document, "mousemove", this._scrollbarDrag, false);
    };
    this._scroll = function (x, y) {
        if (y > this._trackHeight - this._handleHeight)
            y = this._trackHeight - this._handleHeight;
        if (y < 0) y = 0;

        this._yHandle.style.top = y +"px";
        this._y = y;

        this._moveContent();
    };
    this._moveContent = function () {
        this._src.scrollTo(0, Math.round(this._y * this._ratio));
    };

    this.scrollBy = function (x, y) {
        this._scroll(0, (-this._src._y + y)/this._ratio);
    };
    this.scrollTo = function (x, y) {
        this._scroll(0, y/this._ratio);
    };
    this.swapContent = function (o, w, h) {// 判断浏览器
        if(window.event){
            this._removeEvent(this._src.content, "mousewheel", this._scrollbarWheel, false);
        }//W3C
        else{
            this._removeEvent(this._src.content, "DOMMouseScroll", this._scrollbarWheel, false);
        }

        this._src.swapContent(o, w, h);
        this.reset();
    };

    this.reset();
};
//左侧菜单滚动条end

function ThinkError(msg,time,callback) {
	time = time||2500;
	$.ThinkBox.error(msg,{'close':null});
		window.setTimeout(function(){
			$('.ThinkBox-close').click();
			if(typeof callback == 'function') {
				callback();	
			}
	},time);
}

function ThinkSuccess(msg,time,callback) {
	time = time||1500;
	$.ThinkBox.success(msg,{'close':null});
		window.setTimeout(function(){
			$('.ThinkBox-close').click();
			if(typeof callback == 'function') {
				callback();	
			}
	},time);	
}
